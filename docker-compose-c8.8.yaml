# While the Docker images themselves are supported for production usage,
# this docker-compose.yaml is designed to be used by developers to run
# an environment locally. It is not designed to be used in production.
# We recommend to use Kubernetes in production with our Helm Charts:
# https://docs.camunda.io/docs/self-managed/setup/install/
# For local development, we recommend using KIND instead of `docker-compose`:
# https://docs.camunda.io/docs/self-managed/setup/deploy/local/local-kubernetes-cluster/

# This is a lightweight configuration with Orchestration (Zeebe + Operate + Tasklist), Connectors, and Elasticsearch
# See docker-compose-full.yaml for a configuration that also includes Optimize, Identity, Keycloak, Web Modeler, and Console.
services:
  orchestration: # Consolidated Zeebe + Operate + Tasklist - https://docs.camunda.io/docs/self-managed/setup/deploy/other/docker/#zeebe
    image: camunda/camunda:8.8.0
    container_name: orchestration
    environment:
      - CAMUNDA_SYSTEM_CPUTHREADCOUNT=3
      - CAMUNDA_SYSTEM_IOTHREADCOUNT=3
      - CAMUNDA_SECURITY_AUTHENTICATION_UNPROTECTEDAPI=true
      - CAMUNDA_DATA_SECONDARYSTORAGE_ELASTICSEARCH_URL=http://elasticsearch:9200
#      - camunda.security.initialization.users[0].username=demo
#      - camunda.security.initialization.users[0].password=demo
#      - camunda.security.initialization.users[0].name=demo
#      - camunda.security.initialization.users[0].email=demo@demo.com
#      - camunda.security.initialization.defaultRoles.admin.users=demo
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/9600 && echo -e \"GET /actuator/health/status HTTP/1.1\r\nHost: localhost\r\n\r\n\" >&3 && head -n 1 <&3'"]
      interval: 1s
      retries: 30
      start_period: 30s
    networks:
      - camunda
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Camunda Connectors - executes outbound and inbound connector logic
  # Docs: https://docs.camunda.io/docs/self-managed/connectors-deployment/connectors-configuration/
  connectors:
    image: camunda/connectors:8.8.0
    container_name: connectors
    environment:
      - management.endpoints.web.exposure.include=health,configprops
      - management.endpoint.health.probes.enabled=true
      - camunda.client.mode=self-managed
      - camunda.client.grpc-address=http://orchestration:26500
      - camunda.client.rest-address=http://orchestration:8080
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health/readiness"]
      interval: 30s
      timeout: 1s
      retries: 5
      start_period: 30s
    networks:
      - camunda
    depends_on:
      orchestration:
        # Wait for orchestration service to be healthy, otherwise we get a lot of noisy logs from connection errors
        condition: service_healthy

  elasticsearch: # https://hub.docker.com/_/elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.5
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      # allow running with low disk space
      - cluster.routing.allocation.disk.threshold_enabled=false
      # Disable noisy deprecation logs, see https://github.com/camunda/camunda/issues/26285
      - logger.org.elasticsearch.deprecation="OFF"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://127.0.0.1:9200/_cat/health | grep -q green" ]
      interval: 20s
      retries: 30
      start_period: 120s
      timeout: 10s
    networks:
      - camunda
  experiment:
    image: moritz148/measurementsgmt:c8.8-benchmark
    container_name: experiment
    environment:
      - CAMUNDA_CLIENT_MODE=self-managed
      - CAMUNDA_CLIENT_GRPC_ADDRESS=http://orchestration:26500
      - CAMUNDA_CLIENT_REST_ADDRESS=http://orchestration:8080
      #      - CAMUNDA_CLIENT_ZEEBE_GATEWAYADDRESS=zeebe:26500
      - ZEEBE_CLIENT_SECURITY_PLAINTEXT=true
      #      - ZEEBE_CLIENT_CLOUD_ENABLED=false
      - LOGGING_LEVEL_IO_CAMUNDA_ZEEBE_CLIENT_IMPL=ERROR
    networks:
      - camunda
    depends_on:
      orchestration:
        condition: service_healthy

networks:
  camunda:



