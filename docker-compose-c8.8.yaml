# While the Docker images themselves are supported for production usage,
# this docker-compose.yaml is designed to be used by developers to run
# an environment locally. It is not designed to be used in production.
# We recommend to use Kubernetes in production with our Helm Charts:
# https://docs.camunda.io/docs/self-managed/setup/install/
# For local development, we recommend using KIND instead of `docker-compose`:
# https://docs.camunda.io/docs/self-managed/setup/deploy/local/local-kubernetes-cluster/

# This is a lightweight configuration with Orchestration (Zeebe + Operate + Tasklist), Connectors, and Elasticsearch
# See docker-compose-full.yaml for a configuration that also includes Optimize, Identity, Keycloak, Web Modeler, and Console.
services:
  zeebe:
    image: camunda/zeebe:8.8.0
    container_name: zeebe
    restart: always
    environment:
      # --- Cluster-Konfiguration ---
      - ZEEBE_BROKER_CLUSTER_CLUSTERSIZE=1
      - ZEEBE_BROKER_CLUSTER_PARTITIONSCOUNT=1
      - ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR=1
      - ZEEBE_BROKER_CLUSTER_NODEID=0
      - ZEEBE_BROKER_GATEWAY_ENABLE=true

      # --- Thread-Konfiguration ---
      - ZEEBE_BROKER_THREADS_CPUTHREADCOUNT=2
      - ZEEBE_BROKER_THREADS_IOTHREADCOUNT=2

      # --- Daten ---
      - ZEEBE_BROKER_DATA_DIRECTORY=data
      - ZEEBE_BROKER_DATA_SNAPSHOTPERIOD=15m
      - ZEEBE_BROKER_DATA_LOGSEGMENTSIZE=128MB

      # --- Security ---
      - CAMUNDA_SECURITY_AUTHENTICATION_UNPROTECTEDAPI=true
      - ZEEBE_BROKER_EXPORTERS_CAMUNDAEXPORTER_ARGS_CREATESCHEMA=false
      - CAMUNDA_DATA_SECONDARYSTORAGE_ELASTICSEARCH_URL=http://elasticsearch:9200
      - ZEEBE_BROKER_EXPORTERS_CAMUNDAEXPORTER_CLASSNAME=io.camunda.exporter.CamundaExporter


#    ports:
#      - "26500:26500"  # gRPC API (zbctl, Clients)
#      - "9600:9600"    # Management API (Prometheus, Health)
#    volumes:
#      - ./zeebe_data:/usr/local/zeebe/data
    healthcheck:
      test: [ "CMD-SHELL", "timeout 10s bash -c ':> /dev/tcp/127.0.0.1/9600' || exit 1" ]
      interval: 20s
      timeout: 20s
      retries: 10
    networks:
      - camunda
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Camunda Connectors - executes outbound and inbound connector logic
  # Docs: https://docs.camunda.io/docs/self-managed/connectors-deployment/connectors-configuration/
  connectors:
    image: camunda/connectors:8.8.0
    container_name: connectors
    environment:
      - management.endpoints.web.exposure.include=health,configprops
      - management.endpoint.health.probes.enabled=true
      - camunda.client.mode=self-managed
      - camunda.client.grpc-address=http://zeebe:26500
      - camunda.client.rest-address=http://zeebe:8080
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health/readiness"]
      interval: 30s
      timeout: 1s
      retries: 5
      start_period: 30s
    networks:
      - camunda
    depends_on:
      zeebe:
        condition: service_healthy

  elasticsearch: # https://hub.docker.com/_/elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.5
    container_name: elasticsearch
    environment:
      - ES_SETTING_DISCOVERY_TYPE=single-node
      - ES_SETTING_XPACK_SECURITY_ENABLED=false
      - ES_SETTING_CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD__ENABLED=false
      - ES_SETTING_LOGGER_ORG_ELASTICSEARCH_DEPRECATION="OFF"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cat/health | grep -q green" ]
      interval: 20s
      retries: 30
      start_period: 120s
      timeout: 10s
    networks:
      - camunda

  experiment:
    image: moritz148/measurementsgmt:c8.8-single
    container_name: experiment
    environment:
      - GRPC_ADDRESS=http://zeebe:26500
      - REST_ADDRESS=http://zeebe:8080
      - PROCESS_INSTANCES=1000
    networks:
      - camunda
    depends_on:
      zeebe:
        condition: service_healthy

networks:
  camunda:



